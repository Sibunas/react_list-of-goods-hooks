{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","NONE","sortType","setSortType","isReversed","setIsReversed","visibleGoods","goods","ALPHABET","sort","LENGTH","a","b","length","reverse","console","log","getReorderedGoods","alphabetButtonClass","reverseButtonClass","lengthButtonClass","className","type","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAiBKA,E,0DAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KA0CE,IAAME,EAAM,WACjB,MAAgCC,mBAAmBH,EAASI,MAA5D,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoCH,oBAAkB,GAAtD,mBAAOI,EAAP,KAAmBC,EAAnB,KAmBMC,EAnDD,SACLC,EADK,GAGJ,IADCL,EACF,EADEA,SAAUE,EACZ,EADYA,WAGNE,EAAY,YAAOC,GAgBzB,OAdIL,IAAaL,EAASW,SACxBF,EAAaG,OACJP,IAAaL,EAASa,QAC/BJ,EAAaG,MAAK,SAACE,EAAGC,GAAJ,OAAUD,EAAEE,OAASD,EAAEC,UAGvCT,GACFE,EAAaQ,UAKfC,QAAQC,IAAId,EAAUE,GAEfE,EA8BcW,CAAkBnB,EACrC,CAAEI,WAAUE,eACRc,EAAsBhB,IAAaL,EAASW,SAAW,GAAK,WAC5DW,EAAqBf,EACvB,GAAK,WACHgB,EAAoBlB,IAAaL,EAASa,OAAS,GAAK,WAE9D,OACE,sBAAKW,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLC,QA7ByB,WAC/BpB,EAAYN,EAASW,WA6Bfa,UAAS,yBAAoBH,GAH/B,iCAOA,wBACEI,KAAK,SACLC,QAhCmB,WACzBpB,EAAYN,EAASa,SAgCfW,UAAS,4BAAuBD,GAHlC,4BAOA,wBACEE,KAAK,SACLC,QAnCc,WACpBlB,GAAeD,IAmCTiB,UAAS,4BAAuBF,GAHlC,sBAOEjB,IAAaL,EAASI,MAAQG,IAC9B,wBACEkB,KAAK,SACLC,QAvCU,WAClBpB,EAAYN,EAASI,MACrBI,GAAc,IAsCNgB,UAAU,4BAHZ,sBAUJ,6BACGf,EAAakB,KAAI,SAAAC,GAAI,OAAI,oBAAe,UAAQ,OAAvB,SAA+BA,GAAtBA,YCxH3CC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.c98fc149.chunk.js","sourcesContent":["import { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\n// Use this function in the render method to prepare goods\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  // To avoid the original array mutation\n  const visibleGoods = [...goods];\n\n  if (sortType === SortType.ALPHABET) {\n    visibleGoods.sort();\n  } else if (sortType === SortType.LENGTH) {\n    visibleGoods.sort((a, b) => a.length - b.length);\n  }\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n  // Sort and reverse goods if needed\n\n  // eslint-disable-next-line no-console\n  console.log(sortType, isReversed);\n\n  return visibleGoods;\n}\n\n// DON'T save goods to the state\n// type State = {\n//   isReversed: boolean,\n//   sortType: SortType,\n// };\n\nexport const App = () => {\n  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n  const [isReversed, setIsReversed] = useState<boolean>(false);\n\n  const handleSortAlphabetically = () => {\n    setSortType(SortType.ALPHABET);\n  };\n\n  const handleSortByLength = () => {\n    setSortType(SortType.LENGTH);\n  };\n\n  const handleReverse = () => {\n    setIsReversed(!isReversed);\n  };\n\n  const handleReset = () => {\n    setSortType(SortType.NONE);\n    setIsReversed(false);\n  };\n\n  const visibleGoods = getReorderedGoods(goodsFromServer,\n    { sortType, isReversed });\n  const alphabetButtonClass = sortType === SortType.ALPHABET ? '' : 'is-light';\n  const reverseButtonClass = isReversed\n    ? '' : 'is-light';\n  const lengthButtonClass = sortType === SortType.LENGTH ? '' : 'is-light';\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          onClick={handleSortAlphabetically}\n          className={`button is-info ${alphabetButtonClass}`}\n        >\n          Sort alphabetically\n        </button>\n        <button\n          type=\"button\"\n          onClick={handleSortByLength}\n          className={`button is-success ${lengthButtonClass}`}\n        >\n          Sort by length\n        </button>\n        <button\n          type=\"button\"\n          onClick={handleReverse}\n          className={`button is-warning ${reverseButtonClass}`}\n        >\n          Reverse\n        </button>\n        {(sortType !== SortType.NONE || isReversed) && (\n          <button\n            type=\"button\"\n            onClick={handleReset}\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n\n        )}\n      </div>\n      <ul>\n        {visibleGoods.map(good => <li key={good} data-cy=\"Good\">{good}</li>)}\n      </ul>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}