{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","sortType","NONE","isReversed","reorderOptions","setReorderOptions","visibleGoods","goods","ALPHABET","sort","LENGTH","a","b","length","reverse","console","log","getReorderedGoods","alphabetButtonClass","reverseButtonClass","lengthButtonClass","type","onClick","className","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAiBKA,E,iEAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KA0CE,IAAME,EAAM,WACjB,MAA4CC,mBAAyB,CACnEC,SAAUJ,EAASK,KACnBC,YAAY,IAFd,mBAAOC,EAAP,KAAuBC,EAAvB,KAiCMC,EAhED,SACLC,EADK,GAGJ,IADCN,EACF,EADEA,SAAUE,EACZ,EADYA,WAGNG,EAAY,YAAOC,GAgBzB,OAdIN,IAAaJ,EAASW,SACxBF,EAAaG,OACJR,IAAaJ,EAASa,QAC/BJ,EAAaG,MAAK,SAACE,EAAGC,GAAJ,OAAUD,EAAEE,OAASD,EAAEC,UAGvCV,GACFG,EAAaQ,UAKfC,QAAQC,IAAIf,EAAUE,GAEfG,EA2CcW,CAAkBnB,EAAiBM,GAClDc,EACJd,EAAeH,WACbJ,EAASW,SAAW,iBAAmB,0BACrCW,EACJf,EAAeD,WACb,oBAAsB,6BACpBiB,EACJhB,EAAeH,WACbJ,EAASa,OAAS,oBAAsB,6BAE5C,OACE,gCACE,wBACEW,KAAK,SACLC,QA3C2B,WAC/BjB,EAAkB,2BACbD,GADY,IAEfH,SAAUJ,EAASW,aAyCjBe,UAAWL,EAHb,iCAOA,wBACEG,KAAK,SACLC,QA3CqB,WACzBjB,EAAkB,2BACbD,GADY,IAEfH,SAAUJ,EAASa,WAyCjBa,UAAWH,EAHb,4BAOA,wBACEC,KAAK,SACLC,QA3CgB,WACpBjB,EAAkB,2BACbD,GADY,IAEfD,YAAaC,EAAeD,eAyC1BoB,UAAWJ,EAHb,sBAOEf,EAAeH,WACbJ,EAASK,MAAQE,EAAeD,aAClC,wBACEkB,KAAK,SACLC,QA7CY,WAClBjB,EAAkB,CAChBJ,SAAUJ,EAASK,KACnBC,YAAY,KA2CRoB,UAAU,4BAHZ,mBAQF,6BACGjB,EAAakB,KAAI,SAAAC,GAAI,OAAI,oBAAe,UAAQ,OAAvB,SAA+BA,GAAtBA,YCvI3CC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.00673824.chunk.js","sourcesContent":["import { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\n// Use this function in the render method to prepare goods\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  // To avoid the original array mutation\n  const visibleGoods = [...goods];\n\n  if (sortType === SortType.ALPHABET) {\n    visibleGoods.sort();\n  } else if (sortType === SortType.LENGTH) {\n    visibleGoods.sort((a, b) => a.length - b.length);\n  }\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n  // Sort and reverse goods if needed\n\n  // eslint-disable-next-line no-console\n  console.log(sortType, isReversed);\n\n  return visibleGoods;\n}\n\n// DON'T save goods to the state\n// type State = {\n//   isReversed: boolean,\n//   sortType: SortType,\n// };\n\nexport const App = () => {\n  const [reorderOptions, setReorderOptions] = useState<ReorderOptions>({\n    sortType: SortType.NONE,\n    isReversed: false,\n  });\n\n  const handleSortAlphabetically = () => {\n    setReorderOptions({\n      ...reorderOptions,\n      sortType: SortType.ALPHABET,\n    });\n  };\n\n  const handleSortByLength = () => {\n    setReorderOptions({\n      ...reorderOptions,\n      sortType: SortType.LENGTH,\n    });\n  };\n\n  const handleReverse = () => {\n    setReorderOptions({\n      ...reorderOptions,\n      isReversed: !reorderOptions.isReversed,\n    });\n  };\n\n  const handleReset = () => {\n    setReorderOptions({\n      sortType: SortType.NONE,\n      isReversed: false,\n    });\n  };\n\n  const visibleGoods = getReorderedGoods(goodsFromServer, reorderOptions);\n  const alphabetButtonClass\n  = reorderOptions.sortType\n  === SortType.ALPHABET ? 'button is-info' : 'button is-info is-light';\n  const reverseButtonClass\n  = reorderOptions.isReversed\n    ? 'button is-warning' : 'button is-warning is-light';\n  const lengthButtonClass\n  = reorderOptions.sortType\n  === SortType.LENGTH ? 'button is-success' : 'button is-success is-light';\n\n  return (\n    <div>\n      <button\n        type=\"button\"\n        onClick={handleSortAlphabetically}\n        className={alphabetButtonClass}\n      >\n        Sort alphabetically\n      </button>\n      <button\n        type=\"button\"\n        onClick={handleSortByLength}\n        className={lengthButtonClass}\n      >\n        Sort by length\n      </button>\n      <button\n        type=\"button\"\n        onClick={handleReverse}\n        className={reverseButtonClass}\n      >\n        Reverse\n      </button>\n      {(reorderOptions.sortType\n      !== SortType.NONE || reorderOptions.isReversed) && (\n        <button\n          type=\"button\"\n          onClick={handleReset}\n          className=\"button is-danger is-light\"\n        >\n          Reset\n        </button>\n      )}\n      <ul>\n        {visibleGoods.map(good => <li key={good} data-cy=\"Good\">{good}</li>)}\n      </ul>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}